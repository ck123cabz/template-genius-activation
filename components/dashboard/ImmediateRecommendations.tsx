/**
 * Immediate Recommendations Dashboard Component
 * Epic 4, Story 4.3: Real-time Pattern Updates
 * 
 * Live journey recommendations for active client sessions.
 * Displays real-time recommendations generated by the RecommendationEngine.
 */

'use client'

import React, { useState, useEffect, useMemo } from 'react';
import { 
  Zap,
  Clock,
  TrendingUp,
  AlertTriangle,
  CheckCircle,
  Eye,
  Target,
  Users,
  ArrowRight,
  Play,
  Pause,
  Filter,
  ExternalLink,
  Lightbulb,
  Timer,
  Activity
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { Progress } from '../ui/progress';
import { Separator } from '../ui/separator';
import { cn } from '../../lib/utils';
import { 
  RealTimeRecommendation, 
  ActiveClientJourney 
} from '../../lib/recommendations/real-time-journey-recommendations';

/**
 * Sample data for development
 */
const SAMPLE_RECOMMENDATIONS: RealTimeRecommendation[] = [
  {
    id: 'rec_1',
    clientId: 'client_123',
    sessionId: 'session_456',
    type: 'intervention',
    priority: 'critical',
    urgency: 'immediate',
    recommendation: {
      title: 'Prevent Client Drop-off',
      description: 'Client has been on activation page for 7 minutes with low engagement',
      specificAction: 'Show engagement prompt with social proof',
      expectedImpact: 0.35,
      confidenceLevel: 0.82
    },
    patternBasis: {
      primaryPatternId: 'pattern_engagement_1',
      supportingPatternIds: ['pattern_timing_2'],
      patternConfidence: 0.87,
      sampleSize: 23
    },
    implementation: {
      method: 'popup_intervention',
      timing: 0,
      conditions: ['timeOnPage > 300000']
    },
    monitoring: {
      shouldTrack: true,
      successMetrics: ['page_progression', 'engagement_increase'],
      timeframe: 300000
    },
    generatedAt: new Date(Date.now() - 30000),
    expiresAt: new Date(Date.now() + 270000)
  },
  {
    id: 'rec_2', 
    clientId: 'client_789',
    sessionId: 'session_101',
    type: 'pattern_application',
    priority: 'high',
    urgency: 'within_5min',
    recommendation: {
      title: 'Apply High-Confidence Pattern',
      description: 'Pattern shows 81% success rate with similar enterprise clients',
      specificAction: 'Update headline to emphasize ROI and fast implementation',
      expectedImpact: 0.28,
      confidenceLevel: 0.91
    },
    patternBasis: {
      primaryPatternId: 'pattern_content_3',
      supportingPatternIds: [],
      patternConfidence: 0.91,
      sampleSize: 31
    },
    implementation: {
      method: 'content_swap',
      targetElement: 'main-headline',
      newContent: { headline: 'See ROI in 14 days with our proven system' }
    },
    monitoring: {
      shouldTrack: true,
      successMetrics: ['conversion', 'engagement'],
      timeframe: 1800000
    },
    generatedAt: new Date(Date.now() - 120000),
    expiresAt: new Date(Date.now() + 180000)
  },
  {
    id: 'rec_3',
    clientId: 'client_456',
    sessionId: 'session_789',
    type: 'ab_test',
    priority: 'medium',
    urgency: 'within_hour',
    recommendation: {
      title: 'Test New Pattern Discovery',
      description: 'New testimonial + urgency pattern shows promise for tech startups',
      specificAction: 'Start A/B test with testimonial section for startup segment',
      expectedImpact: 0.22,
      confidenceLevel: 0.73
    },
    patternBasis: {
      primaryPatternId: 'pattern_mixed_4',
      supportingPatternIds: ['pattern_testimonial_1'],
      patternConfidence: 0.79,
      sampleSize: 18
    },
    implementation: {
      method: 'ab_test',
      timing: 0
    },
    monitoring: {
      shouldTrack: true,
      successMetrics: ['conversion', 'test_completion'],
      timeframe: 604800000
    },
    generatedAt: new Date(Date.now() - 300000),
    expiresAt: new Date(Date.now() + 3300000)
  }
];

const SAMPLE_ACTIVE_JOURNEYS: ActiveClientJourney[] = [
  {
    clientId: 'client_123',
    sessionId: 'session_456', 
    currentPage: 'activation',
    timeOnCurrentPage: 420000,
    totalJourneyTime: 420000,
    engagementScore: 0.23,
    contentVersion: { id: 'v1', elements: {} },
    clientSegment: 'enterprise',
    companySize: 'medium',
    previousInteractions: [],
    dropOffRisk: 0.78,
    conversionProbability: 0.31
  },
  {
    clientId: 'client_789',
    sessionId: 'session_101',
    currentPage: 'agreement', 
    timeOnCurrentPage: 180000,
    totalJourneyTime: 720000,
    engagementScore: 0.67,
    contentVersion: { id: 'v2', elements: {} },
    clientSegment: 'startup',
    companySize: 'small',
    previousInteractions: [],
    dropOffRisk: 0.45,
    conversionProbability: 0.68
  }
];

export interface ImmediateRecommendationsProps {
  recommendations?: RealTimeRecommendation[];
  activeJourneys?: ActiveClientJourney[];
  onRecommendationApply?: (recommendationId: string, action: 'apply' | 'dismiss' | 'postpone') => void;
  onJourneyView?: (clientId: string) => void;
  showJourneyOverview?: boolean;
  maxRecommendations?: number;
  autoRefresh?: boolean;
  className?: string;
}

export function ImmediateRecommendations({
  recommendations = SAMPLE_RECOMMENDATIONS,
  activeJourneys = SAMPLE_ACTIVE_JOURNEYS,
  onRecommendationApply,
  onJourneyView,
  showJourneyOverview = true,
  maxRecommendations = 10,
  autoRefresh = true,
  className
}: ImmediateRecommendationsProps) {

  const [filter, setFilter] = useState<'all' | 'critical' | 'high' | 'medium' | 'low'>('all');
  const [appliedRecommendations, setAppliedRecommendations] = useState<Set<string>>(new Set());
  const [dismissedRecommendations, setDismissedRecommendations] = useState<Set<string>>(new Set());
  const [isAutoRefresh, setIsAutoRefresh] = useState(autoRefresh);

  // Filter and sort recommendations
  const filteredRecommendations = useMemo(() => {
    let filtered = recommendations.filter(rec => 
      !appliedRecommendations.has(rec.id) && 
      !dismissedRecommendations.has(rec.id)
    );

    if (filter !== 'all') {
      filtered = filtered.filter(rec => rec.priority === filter);
    }

    return filtered
      .sort((a, b) => {
        // Sort by priority first
        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
        const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
        if (priorityDiff !== 0) return priorityDiff;
        
        // Then by expected impact
        return b.recommendation.expectedImpact - a.recommendation.expectedImpact;
      })
      .slice(0, maxRecommendations);
  }, [recommendations, appliedRecommendations, dismissedRecommendations, filter, maxRecommendations]);

  // Handle recommendation actions
  const handleRecommendationAction = (rec: RealTimeRecommendation, action: 'apply' | 'dismiss' | 'postpone') => {
    if (action === 'apply') {
      setAppliedRecommendations(prev => new Set(prev).add(rec.id));
    } else if (action === 'dismiss') {
      setDismissedRecommendations(prev => new Set(prev).add(rec.id));
    }
    
    onRecommendationApply?.(rec.id, action);
  };

  // Get recommendation icon based on type
  const getRecommendationIcon = (rec: RealTimeRecommendation) => {
    const iconClass = cn(
      "h-4 w-4",
      rec.priority === 'critical' ? "text-red-500" :
      rec.priority === 'high' ? "text-orange-500" :
      rec.priority === 'medium' ? "text-yellow-500" : "text-blue-500"
    );

    switch (rec.type) {
      case 'intervention':
        return <AlertTriangle className={iconClass} />;
      case 'pattern_application':
        return <Zap className={iconClass} />;
      case 'ab_test':
        return <Target className={iconClass} />;
      case 'content_optimization':
        return <TrendingUp className={iconClass} />;
      default:
        return <Lightbulb className={iconClass} />;
    }
  };

  // Get priority badge variant
  const getPriorityBadgeVariant = (priority: RealTimeRecommendation['priority']) => {
    switch (priority) {
      case 'critical': return 'destructive';
      case 'high': return 'default';
      case 'medium': return 'secondary';
      case 'low': return 'outline';
      default: return 'secondary';
    }
  };

  // Get urgency indicator
  const getUrgencyIndicator = (urgency: RealTimeRecommendation['urgency']) => {
    const indicators = {
      immediate: { color: 'text-red-500', icon: Timer, text: 'Act Now' },
      within_5min: { color: 'text-orange-500', icon: Clock, text: '5 min' },
      within_hour: { color: 'text-yellow-500', icon: Clock, text: '1 hour' },
      next_session: { color: 'text-blue-500', icon: Clock, text: 'Next session' }
    };
    
    const indicator = indicators[urgency];
    return (
      <div className={cn("flex items-center gap-1 text-xs", indicator.color)}>
        <indicator.icon className="h-3 w-3" />
        {indicator.text}
      </div>
    );
  };

  // Format time remaining
  const formatTimeRemaining = (expiresAt: Date): string => {
    const remaining = expiresAt.getTime() - Date.now();
    if (remaining <= 0) return 'Expired';
    
    const minutes = Math.floor(remaining / 60000);
    if (minutes < 60) return `${minutes}m remaining`;
    
    const hours = Math.floor(minutes / 60);
    return `${hours}h ${minutes % 60}m remaining`;
  };

  // Get journey status indicator
  const getJourneyStatusIndicator = (journey: ActiveClientJourney) => {
    if (journey.dropOffRisk > 0.7) {
      return <AlertTriangle className="h-3 w-3 text-red-500" />;
    } else if (journey.conversionProbability > 0.7) {
      return <CheckCircle className="h-3 w-3 text-green-500" />;
    } else {
      return <Clock className="h-3 w-3 text-yellow-500" />;
    }
  };

  return (
    <div className={cn("space-y-6", className)}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
            Immediate Recommendations
          </h2>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Real-time recommendations for active client journeys
          </p>
        </div>
        
        <div className="flex items-center gap-2">
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value as any)}
            className="text-xs px-2 py-1 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700"
          >
            <option value="all">All Priorities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
          
          <Button
            size="sm"
            variant="outline"
            onClick={() => setIsAutoRefresh(!isAutoRefresh)}
            className="flex items-center gap-1"
          >
            {isAutoRefresh ? <Pause className="h-3 w-3" /> : <Play className="h-3 w-3" />}
            {isAutoRefresh ? 'Pause' : 'Resume'}
          </Button>
        </div>
      </div>

      {/* Active Journey Overview */}
      {showJourneyOverview && activeJourneys.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-sm">
              <Users className="h-4 w-4" />
              Active Client Journeys
              <Badge variant="outline">{activeJourneys.length}</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {activeJourneys.map((journey) => (
                <div
                  key={journey.clientId}
                  className="p-3 border rounded-lg bg-gray-50 dark:bg-gray-900 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                  onClick={() => onJourneyView?.(journey.clientId)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      {getJourneyStatusIndicator(journey)}
                      <span className="text-xs font-mono">{journey.clientId.substr(-6)}</span>
                    </div>
                    <Badge variant="outline" className="text-xs capitalize">
                      {journey.currentPage}
                    </Badge>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    <div>
                      <span className="text-gray-500">Drop-off Risk:</span>
                      <div className={cn(
                        "font-bold",
                        journey.dropOffRisk > 0.7 ? "text-red-600" :
                        journey.dropOffRisk > 0.4 ? "text-yellow-600" : "text-green-600"
                      )}>
                        {Math.round(journey.dropOffRisk * 100)}%
                      </div>
                    </div>
                    <div>
                      <span className="text-gray-500">Conv. Prob:</span>
                      <div className={cn(
                        "font-bold",
                        journey.conversionProbability > 0.7 ? "text-green-600" :
                        journey.conversionProbability > 0.4 ? "text-yellow-600" : "text-red-600"
                      )}>
                        {Math.round(journey.conversionProbability * 100)}%
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-2">
                    <div className="flex justify-between items-center text-xs">
                      <span className="text-gray-500">Time on Page:</span>
                      <span>{Math.round(journey.timeOnCurrentPage / 60000)}m</span>
                    </div>
                    <Progress 
                      value={Math.min(journey.engagementScore * 100, 100)} 
                      className="h-1 mt-1"
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Recommendations List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="h-4 w-4" />
            Live Recommendations
            <Badge variant="outline">{filteredRecommendations.length}</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {filteredRecommendations.length === 0 ? (
            <div className="text-center py-8 text-gray-500 dark:text-gray-400">
              <CheckCircle className="h-12 w-12 mx-auto mb-2 text-green-500" />
              <p>No immediate recommendations</p>
              <p className="text-xs mt-1">All active journeys are on track</p>
            </div>
          ) : (
            <div className="space-y-4">
              {filteredRecommendations.map((rec, index) => (
                <div
                  key={rec.id}
                  className={cn(
                    "relative p-4 rounded-lg border transition-all duration-200",
                    "bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-700",
                    rec.priority === 'critical' && "border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950",
                    rec.priority === 'high' && "border-l-4 border-l-orange-500 bg-orange-50 dark:bg-orange-950",
                    rec.priority === 'medium' && "border-l-4 border-l-yellow-500",
                    rec.urgency === 'immediate' && "ring-1 ring-red-300 animate-pulse"
                  )}
                >
                  {/* Recommendation Header */}
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                      {getRecommendationIcon(rec)}
                      <div>
                        <h4 className="font-medium text-sm">{rec.recommendation.title}</h4>
                        <p className="text-xs text-gray-600 dark:text-gray-400">
                          Client: {rec.clientId.substr(-6)} • {rec.type}
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <Badge variant={getPriorityBadgeVariant(rec.priority)} className="text-xs">
                        {rec.priority}
                      </Badge>
                      {getUrgencyIndicator(rec.urgency)}
                    </div>
                  </div>

                  {/* Recommendation Content */}
                  <p className="text-sm text-gray-800 dark:text-gray-200 mb-3 leading-relaxed">
                    {rec.recommendation.description}
                  </p>
                  
                  <div className="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded p-3 mb-3">
                    <div className="flex items-start gap-2">
                      <ArrowRight className="h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="text-xs font-medium text-blue-800 dark:text-blue-200 mb-1">
                          Recommended Action:
                        </p>
                        <p className="text-sm text-blue-700 dark:text-blue-300">
                          {rec.recommendation.specificAction}
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Metrics */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-xs mb-4">
                    <div>
                      <span className="text-gray-500 dark:text-gray-400">Expected Impact:</span>
                      <div className="font-bold text-green-600">
                        +{Math.round(rec.recommendation.expectedImpact * 100)}%
                      </div>
                    </div>
                    <div>
                      <span className="text-gray-500 dark:text-gray-400">Confidence:</span>
                      <div className="font-bold">
                        {Math.round(rec.recommendation.confidenceLevel * 100)}%
                      </div>
                    </div>
                    <div>
                      <span className="text-gray-500 dark:text-gray-400">Pattern Samples:</span>
                      <div className="font-bold">{rec.patternBasis.sampleSize}</div>
                    </div>
                    <div>
                      <span className="text-gray-500 dark:text-gray-400">Expires:</span>
                      <div className="font-bold text-orange-600">
                        {formatTimeRemaining(rec.expiresAt)}
                      </div>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex items-center justify-between pt-3 border-t border-gray-200 dark:border-gray-700">
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        className="flex items-center gap-1"
                        onClick={() => handleRecommendationAction(rec, 'apply')}
                      >
                        <Play className="h-3 w-3" />
                        Apply Now
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleRecommendationAction(rec, 'postpone')}
                      >
                        Postpone
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => handleRecommendationAction(rec, 'dismiss')}
                      >
                        Dismiss
                      </Button>
                    </div>
                    
                    <div className="flex items-center gap-1">
                      <Button size="sm" variant="ghost" className="p-1">
                        <Eye className="h-3 w-3" />
                      </Button>
                      <Button size="sm" variant="ghost" className="p-1">
                        <ExternalLink className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>

                  {/* Urgency Indicator for Immediate Actions */}
                  {rec.urgency === 'immediate' && (
                    <div className="absolute top-2 right-2">
                      <div className="w-3 h-3 bg-red-500 rounded-full animate-ping"></div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

/**
 * Compact version for smaller spaces
 */
export function CompactRecommendations({
  recommendations = SAMPLE_RECOMMENDATIONS.filter(r => r.priority === 'critical' || r.priority === 'high').slice(0, 3),
  onRecommendationApply,
  className
}: {
  recommendations?: RealTimeRecommendation[];
  onRecommendationApply?: (recommendationId: string, action: string) => void;
  className?: string;
}) {
  if (recommendations.length === 0) return null;

  return (
    <Card className={cn("border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950", className)}>
      <CardContent className="p-3">
        <div className="flex items-center gap-2 mb-2">
          <Zap className="h-4 w-4 text-orange-500" />
          <span className="text-sm font-medium text-orange-800 dark:text-orange-200">
            Immediate Actions
          </span>
          <Badge variant="destructive" className="text-xs">
            {recommendations.length}
          </Badge>
        </div>
        
        <div className="space-y-2">
          {recommendations.map(rec => (
            <div
              key={rec.id}
              className="flex items-start gap-2 p-2 rounded bg-white dark:bg-gray-800 border border-orange-200 dark:border-orange-700"
            >
              {getRecommendationIcon(rec)}
              <div className="flex-1 min-w-0">
                <p className="text-xs font-medium text-gray-800 dark:text-gray-200">
                  {rec.recommendation.title}
                </p>
                <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                  +{Math.round(rec.recommendation.expectedImpact * 100)}% expected impact
                </p>
              </div>
              <Button
                size="sm"
                className="text-xs h-6"
                onClick={() => onRecommendationApply?.(rec.id, 'apply')}
              >
                Apply
              </Button>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

// Helper function defined locally to avoid duplication
function getRecommendationIcon(rec: RealTimeRecommendation) {
  const iconClass = cn(
    "h-3 w-3",
    rec.priority === 'critical' ? "text-red-500" :
    rec.priority === 'high' ? "text-orange-500" :
    rec.priority === 'medium' ? "text-yellow-500" : "text-blue-500"
  );

  switch (rec.type) {
    case 'intervention':
      return <AlertTriangle className={iconClass} />;
    case 'pattern_application':
      return <Zap className={iconClass} />;
    case 'ab_test':
      return <Target className={iconClass} />;
    case 'content_optimization':
      return <TrendingUp className={iconClass} />;
    default:
      return <Lightbulb className={iconClass} />;
  }
}