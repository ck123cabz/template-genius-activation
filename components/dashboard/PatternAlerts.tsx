/**
 * Pattern Alerts Dashboard Component
 * Epic 4, Story 4.3: Real-time Pattern Updates
 * 
 * Real-time pattern alert notifications with admin dashboard integration.
 * Displays alerts generated by the PatternAlertEngine with live updates.
 */

'use client'

import React, { useState, useEffect, useMemo } from 'react';
import { 
  AlertTriangle, 
  TrendingUp, 
  TrendingDown, 
  Bell, 
  CheckCircle, 
  X,
  Filter,
  Clock,
  BarChart3,
  Zap
} from 'lucide-react';
import { PatternAlert } from '../../lib/real-time/pattern-events';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { cn } from '../../lib/utils';

// Sample alert data for development (would come from real-time WebSocket)
const SAMPLE_ALERTS: PatternAlert[] = [
  {
    id: 'alert_1',
    type: 'statistical_significance',
    patternId: 'pattern_hypothesis_1',
    message: 'Pattern achieved statistical significance (p=0.0341, n=15)',
    significance: 'high',
    confidence: 0.87,
    sampleSize: 15,
    recommendedAction: 'Pattern is statistically valid - recommend for systematic use',
    createdAt: new Date(Date.now() - 300000)
  },
  {
    id: 'alert_2',
    type: 'confidence_increase',
    patternId: 'pattern_timing_2',
    message: 'Pattern confidence increased by 23% (65% → 88%)',
    significance: 'high',
    confidence: 0.88,
    previousConfidence: 0.65,
    sampleSize: 12,
    recommendedAction: 'Consider applying this pattern to new clients',
    createdAt: new Date(Date.now() - 900000)
  },
  {
    id: 'alert_3',
    type: 'new_pattern',
    patternId: 'pattern_content_3',
    message: 'High-confidence pattern identified (91% confidence, 8 samples)',
    significance: 'high',
    confidence: 0.91,
    sampleSize: 8,
    recommendedAction: 'Implement this pattern for new similar clients',
    createdAt: new Date(Date.now() - 1500000)
  },
  {
    id: 'alert_4',
    type: 'confidence_decrease',
    patternId: 'pattern_mixed_4',
    message: 'Pattern confidence decreased by 15% (78% → 63%)',
    significance: 'medium',
    confidence: 0.63,
    previousConfidence: 0.78,
    sampleSize: 10,
    recommendedAction: 'Investigate potential issues with this pattern',
    createdAt: new Date(Date.now() - 2100000)
  }
];

export interface PatternAlertsProps {
  alerts?: PatternAlert[];
  onAlertAction?: (alertId: string, action: 'acknowledge' | 'dismiss' | 'investigate') => void;
  onAlertClick?: (alert: PatternAlert) => void;
  maxVisibleAlerts?: number;
  showFilters?: boolean;
  className?: string;
}

export function PatternAlerts({
  alerts = SAMPLE_ALERTS,
  onAlertAction,
  onAlertClick,
  maxVisibleAlerts = 10,
  showFilters = true,
  className
}: PatternAlertsProps) {
  const [dismissedAlerts, setDismissedAlerts] = useState<Set<string>>(new Set());
  const [filterSignificance, setFilterSignificance] = useState<'all' | 'high' | 'medium' | 'low'>('all');
  const [filterType, setFilterType] = useState<'all' | PatternAlert['type']>('all');
  const [acknowledgedAlerts, setAcknowledgedAlerts] = useState<Set<string>>(new Set());

  // Filter and sort alerts
  const filteredAlerts = useMemo(() => {
    let filtered = alerts.filter(alert => !dismissedAlerts.has(alert.id));

    if (filterSignificance !== 'all') {
      filtered = filtered.filter(alert => alert.significance === filterSignificance);
    }

    if (filterType !== 'all') {
      filtered = filtered.filter(alert => alert.type === filterType);
    }

    // Sort by significance, then by creation time (newest first)
    return filtered
      .sort((a, b) => {
        const significanceOrder = { high: 3, medium: 2, low: 1 };
        const sigDiff = significanceOrder[b.significance] - significanceOrder[a.significance];
        if (sigDiff !== 0) return sigDiff;
        return b.createdAt.getTime() - a.createdAt.getTime();
      })
      .slice(0, maxVisibleAlerts);
  }, [alerts, dismissedAlerts, filterSignificance, filterType, maxVisibleAlerts]);

  // Handle alert actions
  const handleAlertAction = (alert: PatternAlert, action: 'acknowledge' | 'dismiss' | 'investigate') => {
    if (action === 'dismiss') {
      setDismissedAlerts(prev => new Set(prev).add(alert.id));
    } else if (action === 'acknowledge') {
      setAcknowledgedAlerts(prev => new Set(prev).add(alert.id));
    }
    
    onAlertAction?.(alert.id, action);
  };

  // Get alert icon based on type and significance
  const getAlertIcon = (alert: PatternAlert) => {
    const iconClass = cn(
      "h-4 w-4",
      alert.significance === 'high' ? "text-red-500" :
      alert.significance === 'medium' ? "text-yellow-500" : "text-blue-500"
    );

    switch (alert.type) {
      case 'confidence_increase':
      case 'new_pattern':
        return <TrendingUp className={iconClass} />;
      case 'confidence_decrease':
        return <TrendingDown className={iconClass} />;
      case 'statistical_significance':
        return <BarChart3 className={iconClass} />;
      default:
        return <AlertTriangle className={iconClass} />;
    }
  };

  // Get alert badge variant
  const getBadgeVariant = (significance: PatternAlert['significance']) => {
    switch (significance) {
      case 'high': return 'destructive';
      case 'medium': return 'secondary';
      case 'low': return 'outline';
      default: return 'secondary';
    }
  };

  // Format relative time
  const formatRelativeTime = (date: Date): string => {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    return `${diffDays}d ago`;
  };

  // Get alert type display text
  const getAlertTypeText = (type: PatternAlert['type']): string => {
    switch (type) {
      case 'confidence_increase': return 'Confidence Up';
      case 'confidence_decrease': return 'Confidence Down';
      case 'new_pattern': return 'New Pattern';
      case 'statistical_significance': return 'Statistical Sig.';
      default: return type;
    }
  };

  return (
    <Card className={cn("border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-950", className)}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Bell className="h-4 w-4" />
            Pattern Alerts
            {filteredAlerts.length > 0 && (
              <Badge variant="secondary" className="ml-2">
                {filteredAlerts.length}
              </Badge>
            )}
          </CardTitle>
          
          {showFilters && (
            <div className="flex items-center gap-2">
              <select
                value={filterSignificance}
                onChange={(e) => setFilterSignificance(e.target.value as any)}
                className="text-xs px-2 py-1 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700"
              >
                <option value="all">All Significance</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
              
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value as any)}
                className="text-xs px-2 py-1 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700"
              >
                <option value="all">All Types</option>
                <option value="confidence_increase">Confidence Up</option>
                <option value="confidence_decrease">Confidence Down</option>
                <option value="new_pattern">New Pattern</option>
                <option value="statistical_significance">Statistical Sig.</option>
              </select>
            </div>
          )}
        </div>
      </CardHeader>

      <CardContent>
        {filteredAlerts.length === 0 ? (
          <div className="text-center py-8 text-gray-500 dark:text-gray-400">
            <CheckCircle className="h-12 w-12 mx-auto mb-2 text-green-500" />
            <p className="text-sm">No alerts match your current filters</p>
          </div>
        ) : (
          <div className="space-y-3">
            {filteredAlerts.map((alert, index) => (
              <div
                key={alert.id}
                className={cn(
                  "relative p-3 rounded-lg border transition-all duration-200 hover:shadow-md cursor-pointer",
                  acknowledgedAlerts.has(alert.id) 
                    ? "bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 opacity-75"
                    : "bg-white dark:bg-gray-900 border-gray-300 dark:border-gray-600",
                  alert.significance === 'high' && "border-l-4 border-l-red-500",
                  alert.significance === 'medium' && "border-l-4 border-l-yellow-500",
                  alert.significance === 'low' && "border-l-4 border-l-blue-500"
                )}
                onClick={() => onAlertClick?.(alert)}
              >
                {/* Alert Header */}
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    {getAlertIcon(alert)}
                    <Badge variant={getBadgeVariant(alert.significance)} className="text-xs">
                      {alert.significance}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      {getAlertTypeText(alert.type)}
                    </Badge>
                    <div className="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400">
                      <Clock className="h-3 w-3" />
                      {formatRelativeTime(alert.createdAt)}
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex items-center gap-1">
                    {!acknowledgedAlerts.has(alert.id) && (
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-6 w-6 p-0 hover:bg-green-100 dark:hover:bg-green-900"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleAlertAction(alert, 'acknowledge');
                        }}
                        title="Acknowledge alert"
                      >
                        <CheckCircle className="h-3 w-3 text-green-600" />
                      </Button>
                    )}
                    
                    <Button
                      size="sm"
                      variant="ghost"
                      className="h-6 w-6 p-0 hover:bg-red-100 dark:hover:bg-red-900"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleAlertAction(alert, 'dismiss');
                      }}
                      title="Dismiss alert"
                    >
                      <X className="h-3 w-3 text-red-600" />
                    </Button>
                  </div>
                </div>

                {/* Alert Message */}
                <p className="text-sm text-gray-800 dark:text-gray-200 mb-2 leading-relaxed">
                  {alert.message}
                </p>

                {/* Alert Metrics */}
                <div className="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400 mb-2">
                  <div className="flex items-center gap-1">
                    <span className="font-medium">Confidence:</span>
                    <span className={cn(
                      "font-mono",
                      alert.confidence >= 0.8 ? "text-green-600 dark:text-green-400" :
                      alert.confidence >= 0.6 ? "text-yellow-600 dark:text-yellow-400" :
                      "text-red-600 dark:text-red-400"
                    )}>
                      {Math.round(alert.confidence * 100)}%
                    </span>
                    {alert.previousConfidence && (
                      <span className="text-gray-400">
                        (was {Math.round(alert.previousConfidence * 100)}%)
                      </span>
                    )}
                  </div>
                  <div className="flex items-center gap-1">
                    <span className="font-medium">Samples:</span>
                    <span className="font-mono">{alert.sampleSize}</span>
                  </div>
                </div>

                {/* Recommended Action */}
                <div className="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded p-2">
                  <div className="flex items-start gap-2">
                    <Zap className="h-3 w-3 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" />
                    <p className="text-xs text-blue-800 dark:text-blue-200 leading-relaxed">
                      <span className="font-medium">Recommended Action:</span> {alert.recommendedAction}
                    </p>
                  </div>
                </div>

                {/* Investigation Button */}
                <div className="mt-3 flex justify-end">
                  <Button
                    size="sm"
                    variant="outline"
                    className="text-xs"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleAlertAction(alert, 'investigate');
                    }}
                  >
                    Investigate Pattern
                  </Button>
                </div>

                {/* Acknowledged Indicator */}
                {acknowledgedAlerts.has(alert.id) && (
                  <div className="absolute top-2 right-2">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  </div>
                )}
              </div>
            ))}

            {/* Show more indicator */}
            {alerts.length > filteredAlerts.length && (
              <div className="text-center py-2">
                <p className="text-xs text-gray-500 dark:text-gray-400">
                  Showing {filteredAlerts.length} of {alerts.filter(a => !dismissedAlerts.has(a.id)).length} alerts
                </p>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
}

/**
 * Compact pattern alerts for smaller spaces
 */
export function CompactPatternAlerts({
  alerts = SAMPLE_ALERTS.slice(0, 3),
  onAlertClick,
  className
}: {
  alerts?: PatternAlert[];
  onAlertClick?: (alert: PatternAlert) => void;
  className?: string;
}) {
  const highPriorityAlerts = alerts
    .filter(alert => alert.significance === 'high')
    .slice(0, 3);

  if (highPriorityAlerts.length === 0) {
    return null;
  }

  return (
    <Card className={cn("border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950", className)}>
      <CardContent className="p-3">
        <div className="flex items-center gap-2 mb-2">
          <AlertTriangle className="h-4 w-4 text-red-500" />
          <span className="text-sm font-medium text-red-800 dark:text-red-200">
            High Priority Alerts
          </span>
          <Badge variant="destructive" className="text-xs">
            {highPriorityAlerts.length}
          </Badge>
        </div>
        
        <div className="space-y-2">
          {highPriorityAlerts.map(alert => (
            <div
              key={alert.id}
              className="flex items-start gap-2 p-2 rounded bg-white dark:bg-gray-800 border border-red-200 dark:border-red-700 cursor-pointer hover:bg-red-50 dark:hover:bg-red-900 transition-colors"
              onClick={() => onAlertClick?.(alert)}
            >
              {getAlertIcon(alert)}
              <div className="flex-1 min-w-0">
                <p className="text-xs text-gray-800 dark:text-gray-200 line-clamp-2">
                  {alert.message}
                </p>
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  {formatRelativeTime(alert.createdAt)}
                </p>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}

// Helper function (defined locally to avoid duplication)
function getAlertIcon(alert: PatternAlert) {
  const iconClass = cn(
    "h-3 w-3",
    alert.significance === 'high' ? "text-red-500" :
    alert.significance === 'medium' ? "text-yellow-500" : "text-blue-500"
  );

  switch (alert.type) {
    case 'confidence_increase':
    case 'new_pattern':
      return <TrendingUp className={iconClass} />;
    case 'confidence_decrease':
      return <TrendingDown className={iconClass} />;
    case 'statistical_significance':
      return <BarChart3 className={iconClass} />;
    default:
      return <AlertTriangle className={iconClass} />;
  }
}

function formatRelativeTime(date: Date): string {
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffMins = Math.floor(diffMs / 60000);
  const diffHours = Math.floor(diffMs / 3600000);
  const diffDays = Math.floor(diffMs / 86400000);

  if (diffMins < 1) return 'Just now';
  if (diffMins < 60) return `${diffMins}m ago`;
  if (diffHours < 24) return `${diffHours}h ago`;
  return `${diffDays}d ago`;
}